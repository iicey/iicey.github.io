<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://iicey.github.io/</id>
    <title>iicey</title>
    <updated>2024-10-20T05:18:30.764Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://iicey.github.io/"/>
    <link rel="self" href="https://iicey.github.io/atom.xml"/>
    <subtitle>博采众长 独立思考</subtitle>
    <logo>https://iicey.github.io/images/avatar.png</logo>
    <icon>https://iicey.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, iicey</rights>
    <entry>
        <title type="html"><![CDATA[mitmproxy]]></title>
        <id>https://iicey.github.io/FSH8ZPkxD/</id>
        <link href="https://iicey.github.io/FSH8ZPkxD/">
        </link>
        <updated>2022-12-01T08:00:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="python使用示例">Python使用示例</h3>
<pre><code class="language-python">from loguru import logger

from mitmproxy import http, ctx


def request(flow: http.HTTPFlow) -&gt; None:
    # ctx.log.info()


def response(flow: http.HTTPFlow):
    text = flow.response.text

</code></pre>
<h3 id="设置上游模式代理二级代理">设置上游模式代理(二级代理)</h3>
<pre><code>mitmdump --mode upstream:http://127.0.0.1:1087/@8888 -s script.py

mitmdump --mode upstream:http://代理服务器ip:port/@本地port -s script.py
</code></pre>
<h3 id="在代码中修改二级代理">在代码中修改二级代理</h3>
<pre><code class="language-python">from mitmproxy import http
from mitmproxy.connection import Server
from mitmproxy.net.server_spec import ServerSpec

def request(flow: http.HTTPFlow) -&gt; None:
    address = (&quot;127.0.0.1&quot;, 1080)
    flow.server_conn = Server(address=flow.server_conn.address)
    flow.server_conn.via = ServerSpec((&quot;http&quot;, address))
</code></pre>
<h3 id="安装证书">安装证书</h3>
<ul>
<li>启动： mitmproxy -p 8888</li>
<li>配置电脑或手机代理</li>
<li>访问<a href="http://mitm.it/">mitm.it</a>下载证书安装</li>
<li>设置信任证书</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[线程池传递多个参数]]></title>
        <id>https://iicey.github.io/32t7aBd2r/</id>
        <link href="https://iicey.github.io/32t7aBd2r/">
        </link>
        <updated>2022-11-09T14:02:27.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-python"># -*- coding: utf-8 -*-
from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor, as_completed
from loguru import logger


def run(number, string):
    logger.info(f&quot;{number} - {string}&quot;)


args = [
    (1, 'a'),
    (2, 'b'),
    (3, 'c'),
]
with ThreadPoolExecutor(max_workers=8) as executor:
    # submit
    future_tasks = [executor.submit(run, number, string) for number, string in args]
    for f in as_completed(future_tasks):
        f.result()

    # submit
    future_tasks = {executor.submit(run, number, string): number for number, string in args}
    for f in as_completed(future_tasks):
        logger.info(future_tasks[f])
        f.result()

    # map
    results = executor.map(run, [number[0] for number in args], [string[1] for string in args])
    for result in results:
        ...

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[邮箱发送]]></title>
        <id>https://iicey.github.io/EO1BwQyCx/</id>
        <link href="https://iicey.github.io/EO1BwQyCx/">
        </link>
        <updated>2022-10-11T18:46:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="qq邮箱">QQ邮箱</h1>
<h2 id="发送文本">发送文本</h2>
<pre><code class="language-python">import os.path
import smtplib
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

def send_text(subject, body, from_addr, to_addr):
    msg = MIMEMultipart()
    msg['From'] = from_addr
    msg['To'] = ';'.join(to_addr)
    msg['Subject'] = subject
    att = MIMEText(body, 'plain', 'utf-8')
    msg.attach(att)
    smtp = smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)
    # 登录邮箱
    smtp.login(from_addr, password)
    # 开始发送
    smtp.sendmail(from_addr, to_addr, msg.as_string())
    smtp.quit()
</code></pre>
<h2 id="发送html">发送html</h2>
<pre><code class="language-python">import os.path
import smtplib
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

def send_html(subject, body, from_addr, to_addr):
    msg = MIMEMultipart()
    msg['From'] = from_addr
    msg['To'] = ';'.join(to_addr)
    msg['Subject'] = subject
    att = MIMEText(body, 'html', 'utf-8')
    msg.attach(att)
    smtp = smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)
    # 登录邮箱
    smtp.login(from_addr, password)
    # 开始发送
    smtp.sendmail(from_addr, to_addr, msg.as_string())
    smtp.quit()
</code></pre>
<h2 id="发送文件">发送文件</h2>
<pre><code class="language-python">import os.path
import smtplib
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

def send_file(subject, body, from_addr, to_addr, file_path):
    msg = MIMEMultipart()
    msg['From'] = from_addr
    msg['To'] = ';'.join(to_addr)
    msg['Subject'] = subject

    text_apart = MIMEText(body, 'plain', 'utf-8')
    excel_apart = MIMEApplication(open(file_path, 'rb').read())
    excel_apart.add_header('Content-Disposition', 'attachment', filename=os.path.basename(file_path))
    msg.attach(text_apart)
    msg.attach(excel_apart)

    smtp = smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)
    # 登录邮箱
    smtp.login(from_addr, password)
    # 开始发送
    smtp.sendmail(from_addr, to_addr, msg.as_string())
    smtp.quit()
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Celery的使用]]></title>
        <id>https://iicey.github.io/WnIZqa8M9/</id>
        <link href="https://iicey.github.io/WnIZqa8M9/">
        </link>
        <updated>2022-09-23T13:30:53.000Z</updated>
        <content type="html"><![CDATA[<h1 id="celery单独使用">Celery单独使用</h1>
<h2 id="目录结构">目录结构</h2>
<ul>
<li>Celery
<ul>
<li>tasks.py</li>
<li>run.py</li>
</ul>
</li>
</ul>
<h2 id="taskspy">tasks.py</h2>
<pre><code class="language-python">from celery import Celery
app = Celery('tasks', backend='redis://127.0.0.1', broker='redis://127.0.0.1')
@app.task
def add(x, y):
    return x + y
</code></pre>
<h2 id="runpy">run.py</h2>
<pre><code class="language-python">from tasks import add

result = add.delay(4, 4)
print('Is task ready: %s' % result.ready())

run_result = result.get(timeout=1)
print('task result: %s' % run_result)
</code></pre>
<h1 id="django中使用celery">Django中使用Celery</h1>
<h2 id="目录结构-2">目录结构</h2>
<ul>
<li>AppName
<ul>
<li>__ init __.py</li>
<li>tasks.py</li>
<li>celery.py</li>
<li>setting.py</li>
</ul>
</li>
</ul>
<h2 id="__-inti-__py">__ inti __.py</h2>
<pre><code class="language-python">from __future__ import absolute_import, unicode_literals

# This will make sure the app is always imported when
# Django starts so that shared_task will use this app.
from .celery import app as celery_app

__all__ = ('celery_app',)
</code></pre>
<h2 id="celerypy">celery.py</h2>
<pre><code class="language-python">from __future__ import absolute_import, unicode_literals
from celery import Celery, shared_task

# set the default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'QuickApp.settings')
app = Celery('QuickApp')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
# - namespace='CELERY' means all celery-related configuration keys
#   should have a `CELERY_` prefix.
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django app configs.
app.autodiscover_tasks()

@app.task
def add(a, b):
    return a + b

# bind 参数意味着该函数将是一个“绑定方法”，以便您可以访问任务类型实例上的属性和方法。
# 绑定的任务意味着任务的第一个参数将始终是任务实例 (self)，就像 Python 绑定方法一样
@app.task(bind=True)
def debug_task(self):
    print('Request: {0!r}'.format(self.request))

# 系统启动的时候添加定时任务
from celery.schedules import crontab
@app.on_after_configure.connect
def setup_periodic_tasks(sender, **kwargs):
    # Calls test('hello') every 10 seconds.
    sender.add_periodic_task(10.0, test.s('hello'), name='hello every 10')

    # Calls test('world') every 30 seconds
    sender.add_periodic_task(30.0, test.s('world'), expires=10)

    # Executes every Monday morning at 7:30 a.m.
    sender.add_periodic_task(
        crontab(hour=7, minute=30, day_of_week=1),
        test.s('Happy Mondays!'),
    )
app.conf.timezone = &quot;Asia/Shanghai&quot;
</code></pre>
<h2 id="taskspy-2">tasks.py</h2>
<pre><code class="language-python">from __future__ import absolute_import, unicode_literals
from celery import shared_task

# 你很可能在可重用的 Django APP 中编写了一些任务，但是 Django APP 不能依赖于具体的 Django 项目，所以你无法直接导入 Celery 实例。
# @shared_task 装饰器能让你在没有具体的 Celery 实例时创建任务
@shared_task
def add(a, b):
    return a + b
</code></pre>
<h2 id="settingpy">setting.py</h2>
<pre><code class="language-python">import os
import platform
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
LOG_DIR = os.path.join(BASE_DIR, &quot;logs&quot;)

if platform.system() == &quot;Linux&quot; or platform.system() == &quot;Windows&quot;:
    # linux or windows
    Path(LOG_DIR).mkdir(parents=True, exist_ok=True)
if platform.system() == &quot;Darwin&quot; or platform.system() == &quot;Mac&quot;:
    ...


CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
# CELERY_RESULT_BACKEND = 'djcelery.backends.database:DatabaseBackend'
# CELERY_RESULT_BACKEND = 'djcelery.backends.cache:CacheBackend'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERYD_MAX_TASKS_PER_CHILD = 10
CELERYD_LOG_FILE = os.path.join(BASE_DIR, &quot;logs&quot;, &quot;celery_work.log&quot;)
CELERYBEAT_LOG_FILE = os.path.join(BASE_DIR, &quot;logs&quot;, &quot;celery_beat.log&quot;)

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[supervisord管理服务进程]]></title>
        <id>https://iicey.github.io/gagb_iLJq/</id>
        <link href="https://iicey.github.io/gagb_iLJq/">
        </link>
        <updated>2022-09-22T05:57:12.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.escapelife.site/posts/98a019e9.html">抄自</a></p>
<h1 id="mac使用专题">Mac使用专题</h1>
<h2 id="安装">安装</h2>
<pre><code class="language-sh">brew install supervisor
brew install services
</code></pre>
<h2 id="启动">启动</h2>
<pre><code class="language-sh">brew services start supervisor
</code></pre>
<h2 id="关闭">关闭</h2>
<pre><code class="language-sh">brew services stop supervisor
</code></pre>
<h2 id="重启">重启</h2>
<pre><code class="language-sh">brew services reload supervisor
</code></pre>
<h2 id="supervisord-文件路径">supervisord 文件路径</h2>
<pre><code>/usr/local/bin/supervisord
/usr/local/opt/supervisor/bin/supervisord
/usr/local/Cellar/supervisor/4.2.4/libexec/bin/supervisord
</code></pre>
<h2 id="supervisordconf-文件路径">supervisord.conf 文件路径</h2>
<pre><code>/usr/local/etc/supervisord.conf
</code></pre>
<h2 id="supervisor-目录路径">supervisor 目录路径</h2>
<pre><code>/usr/local/opt/supervisor
</code></pre>
<pre><code class="language-sh">$ cd /usr/local/opt/supervisor &amp;&amp; ls
CHANGES.rst				bin
COPYRIGHT.txt				homebrew.mxcl.supervisor.plist
INSTALL_RECEIPT.json		homebrew.supervisor.service
README.rst					libexec
</code></pre>
<h2 id="supervisordini-文件路径">supervisord.ini 文件路径</h2>
<pre><code>/usr/local/etc/supervisor.d/*.ini
</code></pre>
<h2 id="访问http-管理界面http1270019001">访问HTTP 管理界面，<a href="http://127.0.0.1:9001">http://127.0.0.1:9001</a></h2>
<pre><code class="language-sh">vim supervisord.conf
</code></pre>
<pre><code class="language-ini"># 在/etc/supervisord.conf中修改[inet_http_server]的参数
[inet_http_server]    ; 侦听在TCP上的socket
port=*:9001           ; 侦听的IP和端口
username=root         ; 连接的时候认证的用户，非必须设置
password=1234         ; 用户名对应的密码，可用明码和SHA加密，非必须设置
</code></pre>
<h2 id="进程启动和守护的能力验证http1270018080">进程启动和守护的能力验证，<a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a></h2>
<pre><code class="language-sh">mkdir ~/example &amp;&amp; mkdir -p ~/example/log &amp;&amp; cd ~/example

echo 'pip install SimpleHTTPServer &amp;&amp; python -m SimpleHTTPServer 8080' &gt; test.sh

chmod +x test.sh

echo '
[program:test]
; 启动目录
directory = ~/example/
; 执行命令
command = sh ~/example/test.sh
; 随 supervisord 启动
autostart = true
; 程序启动 5s 内没有异常则认为是正常运行
startsecs = 5
; 程序异常退出后重新启动
autorestart = true
; 重试启动程序多少次
startretries = 3
; 默认使用当前用户执行应用
user = soulteary
; 需要手动创建目录
stdout_logfile = ~/example/log/supervisor.log
' &gt; /usr/local/etc/supervisor.d/test.ini

brew services reload supervisor
</code></pre>
<h1 id="安装-2">安装</h1>
<h2 id="安装supervisor工具">安装supervisor工具</h2>
<pre><code class="language-shell">yum install -y python-setuptools
easy_install supervisor
</code></pre>
<h2 id="ubuntu直接apt安装就可以了自动生成etcsupervisor目录和supervisordconf配置文件">Ubuntu直接apt安装就可以了,自动生成/etc/supervisor目录和supervisord.conf配置文件</h2>
<pre><code class="language-shell">apt-get install supervisor
</code></pre>
<h1 id="快速配置">快速配置</h1>
<h2 id="创建默认配置文件">创建默认配置文件</h2>
<pre><code class="language-shell">echo_supervisord_conf &gt; /etc/supervisord.conf
</code></pre>
<h2 id="启动默认配置异常解决方案">启动默认配置，<a href="https://stackoverflow.com/questions/25121838/supervisor-on-debian-wheezy-another-program-is-already-listening-on-a-port-that">异常解决方案</a></h2>
<pre><code class="language-shell">supervisord -c /etc/supervisord.conf  # Centos
supervisord -c /etc/supervisor/supervisord.conf  # Ubuntu
supervisord -c /usr/local/etc/supervisord.conf  # Mac
</code></pre>
<h2 id="检查进程">检查进程</h2>
<pre><code class="language-shell">ps aux | grep supervisord
</code></pre>
<h2 id="创建配置文件目录和日志">创建配置文件目录和日志</h2>
<pre><code class="language-shell">mkdir -pv /etc/supervisord.d/conf &amp;&amp; mkdir -pv /etc/supervisord.d/log
</code></pre>
<h2 id="centos系统的配置文件">CentOS系统的配置文件</h2>
<pre><code class="language-shell">vim /etc/supervisord.conf
</code></pre>
<pre><code class="language-ini">[supervisord]
logfile=/var/log/supervisor/supervisord.log
logfile_maxbytes=50MB
logfile_backups=10
loglevel=info
pidfile=/tmp/supervisord.pid
nodaemon=false

[include]
files = supervisord.d/conf/*.conf
</code></pre>
<h2 id="ubuntu的配置文件">Ubuntu的配置文件</h2>
<pre><code class="language-sh">vim /etc/supervisor/supervisord.conf
</code></pre>
<pre><code class="language-ini">[unix_http_server]
file=/var/run/supervisor.sock
chmod=0700

[supervisord]
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
childlogdir=/var/log/supervisor

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock

[include]
files = /etc/supervisor/conf.d/*.conf
</code></pre>
<h2 id="mac的配置文件">Mac的配置文件</h2>
<pre><code class="language-sh">vim /usr/local/etc/supervisord.conf
</code></pre>
<h2 id="supervisordconf-文件内容说明">supervisord.conf 文件内容说明</h2>
<pre><code class="language-ini"># unix_http_server
;[unix_http_server]
;file=/var/run/supervisor.sock  ; socket文件的路径，用XML_RPC和supervisord进行通信，非必须设置
;chmod=0700                     ; 修改上面的那个socket文件的权限，非必须设置
;chown=escape:docker            ; 修改上面的那个socket文件的属组，非必须设置
;username=escape                ; 连接的时候认证的用户，非必须设置
;password=123456                ; 用户名对应的密码，可用明码和SHA加密，非必须设置

# inet_http_server
;[inet_http_server]    ; 侦听在TCP上的socket
;port=*:9001           ; 侦听的IP和端口
;username=root         ; 连接的时候认证的用户，非必须设置
;password=1234         ; 用户名对应的密码，可用明码和SHA加密，非必须设置

# supervisord
;[supervisord]                                ; 主要是定义supervisord服务端进程的一些参数
;logfile=/var/log/supervisor/supervisord.log  ; supervisord主进程的日志路径，非必须设置
;logfile_maxbytes=50MB                        ; 日志文件的最大的大小，超过则生成新的日志，非必须设置
;logfile_backups=10                           ; 日志文件保持的数量，默认为10个，非必须设置
;loglevel=info                                ; 日志级别，非必须设置
;pidfile=/var/run/supervisord.pid             ; supervisord服务的pid文件路径，非必须设置
;nodaemon=false                               ; 如果是true的话，supervisord进程将在前台运行，默认后台以守护进程运行
;umask=022                                    ; 进程创建文件的掩码
;user=escape                                  ; 以root启动之后，该用户可以对supervisord进行管理
;identifier=supervisor                        ; 多个supervisor且想调用XML_RPC统一管理，就需要为每个设置不同的标识符
;directory=/tmp                               ; 作为守护进程运行的时候会先切换到这个目录
;childlogdir=/var/log/supervisor              ; 当子进程日志路径为AUTO的时候，子进程日志文件的存放路径
;environment=KEY=&quot;value&quot;                      ; 设置环境变量，会被子进程继承

# rpcinterface
;[rpcinterface:supervisor]  ; 给XML_RPC用的
;supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

# supervisorctl
;[supervisorctl]                            ; 主要是针对supervisorctl的一些配置
;serverurl=unix:///var/run/supervisor.sock  ; 注意这个是和前面的[unix_http_server]对应的
;username=root                              ; 用户名
;password=1234                              ; 密码
;prompt=mysupervisor                        ; 输入用户名密码时候的提示符
;history_file=~/.super_history              ; 参数和shell中的history类似

# include
;[include]
;files = /etc/supervisor/conf.d/*.conf      ; 读取配置文件的路径，支持匹配扩展
</code></pre>
<h2 id="创建管理应用的配置">创建管理应用的配置</h2>
<pre><code>cd /etc/supervisor.d
cd /usr/local/etc/supervisor.d
vim program.ini
</code></pre>
<h2 id="应用配置的ini文件说明">应用配置的ini文件说明</h2>
<pre><code># program
;[program:theprogramname]      ; 必填选项，其格式为[program:应用名称]
;command=/bin/cat              ; 启动命令，可以使用参数，不能是守护进程
;process_name=%(program_name)s ; 当numprocs为1时，process_name=%(program_name)s;
                                 当numprocs&gt;=2时，%(program_name)s_%(process_num)02d
;numprocs=1                    ; 启动的进程数量，默认为1个，类似进程池的概念
;directory=/tmp                ; 程序的执行目录
;umask=022                     ; 指定掩码，默认为None
;priority=999                  ; 指定优先级，值越高、最后启动、最先被关闭，默认值999
;autostart=true                ; 当supervisor启动时，程序将会自动启动
;startsecs=1                   ; 启动1秒后没有异常退出就当作已经正常启动
;startretries=3                ; 启动异常重试次数，超过这个次数就认为失败
;autorestart=unexpected        ; 程序异常退出后不会自动重启，true表示自动重启
;exitcodes=0,2                 ; 当退出码是0和2时，执行重启，默认值0和2
;stopsignal=HUP                ; 进程停止信号，默认为TERM，TERM/HUP/INT/QUIT/KILL等
;stopwaitsecs=10               ; 当向子进程发送stopsignal信号后，到系统返回信息给supervisord
                                 服务所等待的最大时间。超过这个时间，supervisord会向该子进程发
                                 送一个强制kill的信号
;stopasgroup=false             ; 主要用于supervisord管理的子进程，这个子进程本身还有子进程。
                                 那么我们如果仅仅干掉supervisord的子进程的话，子进程的子进程
                                 有可能会变成孤儿进程。设置这个选项，把整个该子进程的整个进程组
                                 都干掉。设置为true的话，一般killasgroup也会被设置为true的。
                                 需要注意的是，该选项发送的是stop信号
;killasgroup=false             ; 和上面的stopasgroup类似，不过发送的是kill信号
;user=escape                   ; 用哪个用户启动
;redirect_stderr=true          ; 如果为true，则stderr的日志会被写入stdout日志文件中，默认false
;stdout_logfile=/a/path        ; stdout日志文件路径
;stdout_logfile_maxbytes=1MB   ; stdout日志文件大小，默认50MB
;stdout_logfile_backups=10     ; stdout日志文件备份数，默认10次
;stdout_capture_maxbytes=1MB   ; 设定capture管道的大小，当值不为0时，子进程可以从stdout
                                 发送信息，而supervisor可以根据信息，发送相应的event。
                                 默认为0，为0的时候表达关闭管道。
;stdout_events_enabled=false   ; 当设置为ture的时候，当子进程由stdout向文件描述符中写日志的时
                                 候，将触发supervisord发送PROCESS_LOG_STDOUT类型的event，
                                 默认为false。
;stderr_logfile=/a/path        ; stderr日志文件路径
;stderr_logfile_maxbytes=1MB   ; stderr日志文件大小，默认50MB
;stderr_logfile_backups=10     ; stderr日志文件备份数，默认10次
;stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)
;stderr_events_enabled=false   ; emit events on stderr writes (default false)
;environment=A=&quot;1&quot;,B=&quot;2&quot;       ; 添加需要的环境变量
;serverurl=AUTO                ; override serverurl computation (childutils) |
</code></pre>
<h2 id="信号">信号</h2>
<table>
<thead>
<tr>
<th style="text-align:left">编号</th>
<th style="text-align:left">信号名称</th>
<th style="text-align:left">数字表示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><code>SIGTERM</code></td>
<td style="text-align:left">supervisord 及其所有子进程都将关闭</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><code>SIGINT</code></td>
<td style="text-align:left">supervisord 及其所有子进程都将关闭</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><code>SIGQUIT</code></td>
<td style="text-align:left">supervisord 及其所有子进程都将关闭</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><code>SIGHUP</code></td>
<td style="text-align:left">supervisord 将关闭所有进程，重新载入配置文件并启动所有进程</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><code>SIGUSR2</code></td>
<td style="text-align:left">supervisord 将关闭并重新打开主要活动日志和所有子日志文件</td>
</tr>
</tbody>
</table>
<pre><code># 指定停止信号，默认为TERM
; [中断]: INT(类似于Ctrl+C)(kill -INT pid)，退出后会将其写文件或日志(推荐)
; [终止]: TERM(类似于kill -TERM pid)
; [挂起]: HUP(类似于kill -HUP pid)，注意与Ctrl+Z/kill -stop pid不同
; [从容停止]: QUIT(类似于kill -QUIT pid)
stopsignal=TERM

# 日常使用方式
[root@localhost ~] $ sudo supervisorctl signal hup app-test:*
</code></pre>
<table>
<thead>
<tr>
<th style="text-align:left">信号名称</th>
<th style="text-align:left">数字</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>SIGHUP</code></td>
<td style="text-align:left">1</td>
<td style="text-align:left">终端挂起或控制进程终止。当用户退出 Shell 时，由该进程启动的所有进程都会收到这个信号，默认动作为终止进程。</td>
</tr>
<tr>
<td style="text-align:left"><code>SIGINT</code></td>
<td style="text-align:left">2</td>
<td style="text-align:left">键盘中断。当用户按下组合键时，用户终端向正在运行中的由该终端启动的程序发出此信号。默认动作为终止进程。</td>
</tr>
<tr>
<td style="text-align:left"><code>SIGQUIT</code></td>
<td style="text-align:left">3</td>
<td style="text-align:left">键盘退出键被按下。当用户按下或组合键时，用户终端向正在运行中的由该终端启动的程序发出此信号。默认动作为退出程序。</td>
</tr>
<tr>
<td style="text-align:left"><code>SIGFPE</code></td>
<td style="text-align:left">8</td>
<td style="text-align:left">发生致命的运算错误时发出。不仅包括浮点运算错误，还包括溢出及除数为 0 等所有的算法错误。默认动作为终止进程并产生 core 文件。</td>
</tr>
<tr>
<td style="text-align:left"><code>SIGKILL</code></td>
<td style="text-align:left">9</td>
<td style="text-align:left">无条件终止进程。进程接收到该信号会立即终止，不进行清理和暂存工作。该信号不能被忽略、处理和阻塞，它向系统管理员提供了可以杀死任何进程的方法。</td>
</tr>
<tr>
<td style="text-align:left"><code>SIGALRM</code></td>
<td style="text-align:left">14</td>
<td style="text-align:left">定时器超时，默认动作为终止进程。</td>
</tr>
<tr>
<td style="text-align:left"><code>SIGTERM</code></td>
<td style="text-align:left">15</td>
<td style="text-align:left">程序结束信号，可以由 kill 命令产生。与 SIGKILL 不同的是，SIGTERM 信号可以被阻塞和终止，以便程序在退出前可以保存工作或清理临时文件等。</td>
</tr>
</tbody>
</table>
<h2 id="supervisord分组">supervisord分组</h2>
<p><a href="https://blog.csdn.net/qq_42517220/article/details/108624561">https://blog.csdn.net/qq_42517220/article/details/108624561</a></p>
<pre><code># 组配置模板
[group:lnmp]
programs=nginx-web,db-mysql,python-backend,confd  ; 指定组内成员
priority=999                                      ; 指定优先级，默认为999
</code></pre>
<h2 id="服务配置模板ini文件">服务配置模板，ini文件</h2>
<pre><code class="language-ini">[program:confd]
directory = /usr/local/bin
command = /usr/local/bin/confd -config-file /etc/confd/confd.toml
process_name=%(program_name)s
user = root
stopasgroup=true
killasgroup=true
autostart = true
startsecs = 5
autorestart = true
startretries = 3
stdout_logfile=/a/path
stdout_logfile_maxbytes = 20MB
stdout_logfile_backups = 20
stderr_logfile=/b/path
stderr_logfile_maxbytes=20MB
stderr_logfile_backups=20
environment=PYTHONPATH=&quot;$PYTHONPATH:/path/to/somewhere&quot;
</code></pre>
<pre><code># 环境变量需要通过%()s的方式使用
[program:example]
command=/usr/bin/example --loglevel=%(ENV_LOGLEVEL)s
</code></pre>
<h1 id="服务启动">服务启动</h1>
<h2 id="二进制启动">二进制启动</h2>
<pre><code># 二进制启动
supervisord -c /etc/supervisord.conf

# 检查进程
ps aux | grep supervisord
</code></pre>
<h2 id="设置开机启动及systemd方式启动">设置开机启动及systemd方式启动</h2>
<pre><code class="language-sh">$ vim /etc/rc.d/init.d/supervisord
#!/bin/sh
#
# /etc/rc.d/init.d/supervisord
#
# Supervisor is a client/server system that
# allows its users to monitor and control a
# number of processes on UNIX-like operating
# systems.
#
# chkconfig: - 64 36
# description: Supervisor Server
# processname: supervisord

# Source init functions
. /etc/rc.d/init.d/functions

prog=&quot;supervisord&quot;

prefix=&quot;/usr&quot;
exec_prefix=&quot;${prefix}&quot;
prog_bin=&quot;${exec_prefix}/bin/supervisord&quot;
PIDFILE=&quot;/var/run/$prog.pid&quot;

start() {
    echo -n $&quot;Starting $prog: &quot;
    daemon $prog_bin --pidfile $PIDFILE -c /etc/supervisord.conf
    [ -f $PIDFILE ] &amp;&amp; success $&quot;$prog startup&quot; || failure $&quot;$prog startup&quot;
    echo
}

stop() {
    echo -n $&quot;Shutting down $prog: &quot;
    [ -f $PIDFILE ] &amp;&amp; killproc $prog || success $&quot;$prog shutdown&quot;
    echo
}

case &quot;$1&quot; in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status $prog
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo &quot;Usage: $0 {start|stop|restart|status}&quot;
        ;;
esac
</code></pre>
<pre><code class="language-sh"># 设置开机启动及systemd方式启动
sudo chmod +x /etc/rc.d/init.d/supervisord
sudo chkconfig --add supervisord
sudo chkconfig supervisord on
sudo service supervisord start
</code></pre>
<h1 id="命令使用">命令使用</h1>
<h2 id="supervisorctl-命令">supervisorctl 命令</h2>
<h2 id="查看进程状态">查看进程状态</h2>
<pre><code># beepkg为配置文件[program:beepkg]里配置的值
supervisorctl status
</code></pre>
<h2 id="启动某个进程">启动某个进程</h2>
<pre><code>supervisorctl start beepkg
</code></pre>
<h2 id="停止某一个进程">停止某一个进程</h2>
<pre><code>supervisorctl stop beepkg
</code></pre>
<h2 id="重启某个进程">重启某个进程</h2>
<pre><code>supervisorctl restart beepkg
</code></pre>
<h2 id="启动所有属于名为groupworker这个分组的进程">启动所有属于名为groupworker这个分组的进程</h2>
<pre><code class="language-bash">supervisorctl start groupworker
</code></pre>
<h2 id="停止所有属于名为groupworker这个分组的进程">停止所有属于名为groupworker这个分组的进程</h2>
<pre><code>supervisorctl stop groupworker
</code></pre>
<h2 id="重动所有属于名为groupworker这个分组的进程">重动所有属于名为groupworker这个分组的进程</h2>
<pre><code>supervisorctl restart groupworker
</code></pre>
<h2 id="停止全部进程">停止全部进程</h2>
<pre><code>supervisorctl stop all
</code></pre>
<h2 id="载入最新的配置文件">载入最新的配置文件</h2>
<pre><code># 载入最新的配置文件
# 停止原有进程并按新的配置启动、管理所有进程
# 注意start、restart、stop都不会载入最新的配置文件
supervisorctl reload
</code></pre>
<h2 id="根据最新的配置文件启动新配置或有改动的进程">根据最新的配置文件启动新配置或有改动的进程</h2>
<pre><code># 根据最新的配置文件启动新配置或有改动的进程
# 注意，如果配置没有改动的进程不会受影响而重启
supervisorctl update
</code></pre>
<h2 id="help">help</h2>
<pre><code>supervisorctl --help
</code></pre>
<h2 id="supervisord-命令">supervisord 命令</h2>
<h2 id="help-2">help</h2>
<pre><code>supervisord --help
</code></pre>
<h1 id="运行安全">运行安全</h1>
<p>开发人员尽力确保以 <code>root</code> 身份运行的 <code>supervisord</code> 进程不会导致意外的权限升级。但 <code>supervisord</code> 允许在其配置文件中的任意路径规范写入数据，允许任意路径选择可能会造成符号链接工具的漏洞。确保 <code>supervisord</code> 配置文件的权限安全，除此之外，确保 <code>Python PATH</code> 和标准库都有足够的文件权限保护。</p>
<h1 id="服务状态">服务状态</h1>
<p>我们启动 <code>supervisord</code> 之后，可以查看进程的运行状态，所以必须事先知道 <code>supervisord</code> 到底有几种状态，对应状态代表着什么意思，之前的状态转移过程。</p>
<table>
<thead>
<tr>
<th style="text-align:left">编号</th>
<th style="text-align:left">进程状态</th>
<th style="text-align:left">退出码</th>
<th style="text-align:left">状态说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"><code>STOPPED</code></td>
<td style="text-align:left"><code>0</code></td>
<td style="text-align:left">该过程已经停止</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"><code>STARTING</code></td>
<td style="text-align:left"><code>10</code></td>
<td style="text-align:left">该过程正在启动</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"><code>RUNNING</code></td>
<td style="text-align:left"><code>20</code></td>
<td style="text-align:left">该过程正在运行</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left"><code>BACKOFF</code></td>
<td style="text-align:left"><code>30</code></td>
<td style="text-align:left">该过程进入 STARTING 状态但退出太快导致无法进入 RUNNING 状态</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left"><code>STOPPING</code></td>
<td style="text-align:left"><code>40</code></td>
<td style="text-align:left">该过程正在停止</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left"><code>EXITED</code></td>
<td style="text-align:left"><code>100</code></td>
<td style="text-align:left">该过程退出 RUNNING 状态</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left"><code>FATAL</code></td>
<td style="text-align:left"><code>200</code></td>
<td style="text-align:left">该过程无法成功启动</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left"><code>UNKNOWN</code></td>
<td style="text-align:left"><code>1000</code></td>
<td style="text-align:left">该过程处于未知状态，通常为 supervisord 程序错误</td>
</tr>
</tbody>
</table>
<figure data-type="image" tabindex="1"><img src="https://iicey.github.io//post-images/1663851723213.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python3常用的标准库]]></title>
        <id>https://iicey.github.io/xg7BG_qOo/</id>
        <link href="https://iicey.github.io/xg7BG_qOo/">
        </link>
        <updated>2022-09-16T06:47:23.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://docs.python.org/zh-cn/3/library/index.html">Python 标准库</a></p>
<ul>
<li>概述
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/intro.html#notes-on-availability">可用性注释</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/zh-cn/3/library/functions.html">内置函数</a></li>
<li>内置常量
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/constants.html#constants-added-by-the-site-module">由 <code>site</code> 模块添加的常量</a></li>
</ul>
</li>
<li>内置类型
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#binary-sequence-types-bytes-bytearray-memoryview">二进制序列类型 --- <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#set-types-set-frozenset">集合类型 --- <code>set</code>, <code>frozenset</code></a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#mapping-types-dict">映射类型 --- <code>dict</code></a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#context-manager-types">上下文管理器类型</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#type-annotation-types-generic-alias-union">类型注解的类型 --- Generic Alias 、 Union</a></li>
</ul>
</li>
<li>文本处理服务
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/string.html"><code>string</code> --- 常见的字符串操作</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/re.html"><code>re</code> --- 正则表达式操作</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/difflib.html"><code>difflib</code> --- 计算差异的辅助工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/textwrap.html"><code>textwrap</code> --- 文本自动换行与填充</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/unicodedata.html"><code>unicodedata</code> --- Unicode 数据库</a></li>
</ul>
</li>
<li>数据类型
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/datetime.html"><code>datetime</code> --- 基本日期和时间类型</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/zoneinfo.html"><code>zoneinfo</code> --- IANA 时区支持</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/calendar.html"><code>calendar</code> --- 日历相关函数</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/collections.html"><code>collections</code> --- 容器数据类型</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/collections.abc.html"><code>collections.abc</code> --- 容器的抽象基类</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/heapq.html"><code>heapq</code> --- 堆队列算法</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/bisect.html"><code>bisect</code> --- 数组二分查找算法</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/array.html"><code>array</code> --- 高效的数值数组</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/weakref.html"><code>weakref</code> --- 弱引用</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/types.html"><code>types</code> --- 动态类型创建和内置类型名称</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/copy.html"><code>copy</code> --- 浅层 (shallow) 和深层 (deep) 复制操作</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/reprlib.html"><code>reprlib</code> --- 另一种 <code>repr()</code> 实现</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/enum.html"><code>enum</code> --- 对枚举的支持</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/graphlib.html"><code>graphlib</code> --- 操作类似图的结构的功能</a></li>
</ul>
</li>
<li>数字和数学模块
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/numbers.html"><code>numbers</code> --- 数字的抽象基类</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/math.html"><code>math</code> --- 数学函数</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/cmath.html"><code>cmath</code> --- 关于复数的数学函数</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/decimal.html"><code>decimal</code> --- 十进制定点和浮点运算</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/fractions.html"><code>fractions</code> --- 分数</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/random.html"><code>random</code> --- 生成伪随机数</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/statistics.html"><code>statistics</code> --- 数学统计函数</a></li>
</ul>
</li>
<li>函数式编程模块
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/itertools.html"><code>itertools</code> --- 为高效循环而创建迭代器的函数</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/functools.html"><code>functools</code> --- 高阶函数和可调用对象上的操作</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/operator.html"><code>operator</code> --- 标准运算符替代函数</a></li>
</ul>
</li>
<li>文件和目录访问
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/pathlib.html"><code>pathlib</code> --- 面向对象的文件系统路径</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/os.path.html"><code>os.path</code> --- 常用路径操作</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/fileinput.html"><code>fileinput</code> --- 迭代来自多个输入流的行</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/stat.html"><code>stat</code> --- 解析 <code>stat()</code> 结果</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/filecmp.html"><code>filecmp</code> --- 文件及目录的比较</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/tempfile.html"><code>tempfile</code> --- 生成临时文件和目录</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/glob.html"><code>glob</code> --- Unix 风格路径名模式扩展</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/fnmatch.html"><code>fnmatch</code> --- Unix 文件名模式匹配</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/linecache.html"><code>linecache</code> --- 随机读写文本行</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/shutil.html"><code>shutil</code> --- 高阶文件操作</a></li>
</ul>
</li>
<li>数据持久化
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/pickle.html"><code>pickle</code> --- Python 对象序列化</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/copyreg.html"><code>copyreg</code> --- 注册配合 <code>pickle</code> 模块使用的函数</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/shelve.html"><code>shelve</code> --- Python 对象持久化</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/marshal.html"><code>marshal</code> --- 内部 Python 对象序列化</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/dbm.html"><code>dbm</code> --- Unix &quot;数据库&quot; 接口</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/sqlite3.html"><code>sqlite3</code> --- SQLite 数据库 DB-API 2.0 接口模块</a></li>
</ul>
</li>
<li>数据压缩和存档
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/zlib.html"><code>zlib</code> --- 与 <strong>gzip</strong> 兼容的压缩</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/gzip.html"><code>gzip</code> --- 对 <strong>gzip</strong> 格式的支持</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/bz2.html"><code>bz2</code> --- 对 <strong>bzip2</strong> 压缩算法的支持</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/lzma.html"><code>lzma</code> --- 用 LZMA 算法压缩</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/zipfile.html"><code>zipfile</code> --- 使用ZIP存档</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/tarfile.html"><code>tarfile</code> --- 读写tar归档文件</a></li>
</ul>
</li>
<li>文件格式
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/csv.html"><code>csv</code> --- CSV 文件读写</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/configparser.html"><code>configparser</code> --- 配置文件解析器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/netrc.html"><code>netrc</code> --- netrc 文件处理</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/plistlib.html"><code>plistlib</code> --- 生成与解析 Apple <code>.plist</code> 文件</a></li>
</ul>
</li>
<li>加密服务
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/hashlib.html"><code>hashlib</code> --- 安全哈希与消息摘要</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/hmac.html"><code>hmac</code> --- 基于密钥的消息验证</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/secrets.html"><code>secrets</code> --- 生成管理密码的安全随机数</a></li>
</ul>
</li>
<li>通用操作系统服务
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/os.html"><code>os</code> --- 多种操作系统接口</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/io.html"><code>io</code> --- 处理流的核心工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/time.html"><code>time</code> --- 时间的访问和转换</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/argparse.html"><code>argparse</code> --- 命令行选项、参数和子命令解析器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/getopt.html"><code>getopt</code> --- C 风格的命令行选项解析器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/logging.html"><code>logging</code> --- Python 的日志记录工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/logging.config.html"><code>logging.config</code> --- 日志记录配置</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/logging.handlers.html"><code>logging.handlers</code> --- 日志处理程序</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/getpass.html"><code>getpass</code> --- 便携式密码输入工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/curses.html"><code>curses</code> --- 终端字符单元显示的处理</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/curses.html#module-curses.textpad"><code>curses.textpad</code> --- 用于 curses 程序的文本输入控件</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/curses.ascii.html"><code>curses.ascii</code> --- 用于 ASCII 字符的工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/curses.panel.html"><code>curses.panel</code> --- curses 的面板栈扩展</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/platform.html"><code>platform</code> --- 获取底层平台的标识数据</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/errno.html"><code>errno</code> --- 标准 errno 系统符号</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/ctypes.html"><code>ctypes</code> --- Python 的外部函数库</a></li>
</ul>
</li>
<li>并发执行
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/threading.html"><code>threading</code> --- 基于线程的并行</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/multiprocessing.html"><code>multiprocessing</code> --- 基于进程的并行</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/multiprocessing.shared_memory.html"><code>multiprocessing.shared_memory</code> --- Shared memory for direct access across processes</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/concurrent.html"><code>concurrent</code> 包</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/concurrent.futures.html"><code>concurrent.futures</code> --- 启动并行任务</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/subprocess.html"><code>subprocess</code> --- 子进程管理</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/sched.html"><code>sched</code> --- 事件调度器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/queue.html"><code>queue</code> --- 一个同步的队列类</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/contextvars.html"><code>contextvars</code> --- 上下文变量</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/_thread.html"><code>_thread</code> --- 底层多线程 API</a></li>
</ul>
</li>
<li>网络和进程间通信
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/asyncio.html"><code>asyncio</code> --- 异步 I/O</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/socket.html"><code>socket</code> --- 底层网络接口</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/ssl.html"><code>ssl</code> --- 套接字对象的 TLS/SSL 包装器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/select.html"><code>select</code> --- 等待 I/O 完成</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/selectors.html"><code>selectors</code> --- 高级 I/O 复用库</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/signal.html"><code>signal</code> --- 设置异步事件处理程序</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/mmap.html"><code>mmap</code> --- 内存映射文件支持</a></li>
</ul>
</li>
<li>互联网数据处理
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/email.html"><code>email</code> --- 电子邮件与 MIME 处理包</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/json.html"><code>json</code> --- JSON 编码和解码器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/mailbox.html"><code>mailbox</code> --- 操作多种格式的邮箱</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/mimetypes.html"><code>mimetypes</code> --- 映射文件名到 MIME 类型</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/base64.html"><code>base64</code> --- Base16, Base32, Base64, Base85 数据编码</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/binhex.html"><code>binhex</code> --- 对binhex4文件进行编码和解码</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/binascii.html"><code>binascii</code> --- 二进制和 ASCII 码互转</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/quopri.html"><code>quopri</code> --- 编码与解码经过 MIME 转码的可打印数据</a></li>
</ul>
</li>
<li>结构化标记处理工具
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/html.html"><code>html</code> --- 超文本标记语言支持</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/html.parser.html"><code>html.parser</code> --- 简单的 HTML 和 XHTML 解析器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/html.entities.html"><code>html.entities</code> --- HTML 一般实体的定义</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/xml.html">XML处理模块</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/xml.etree.elementtree.html"><code>xml.etree.ElementTree</code> --- ElementTree XML API</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/xml.dom.html"><code>xml.dom</code> --- 文档对象模型 API</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/xml.dom.minidom.html"><code>xml.dom.minidom</code> --- 最小化的 DOM 实现</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/xml.dom.pulldom.html"><code>xml.dom.pulldom</code> --- 支持构建部分 DOM 树</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/xml.sax.html"><code>xml.sax</code> --- 支持 SAX2 解析器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/xml.sax.handler.html"><code>xml.sax.handler</code> --- SAX 处理句柄的基类</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/xml.sax.utils.html"><code>xml.sax.saxutils</code> --- SAX 工具集</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/xml.sax.reader.html"><code>xml.sax.xmlreader</code> --- 用于 XML 解析器的接口</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/pyexpat.html"><code>xml.parsers.expat</code> --- 使用 Expat 的快速 XML 解析</a></li>
</ul>
</li>
<li>互联网协议和支持
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/webbrowser.html"><code>webbrowser</code> --- 方便的 Web 浏览器控制工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/wsgiref.html"><code>wsgiref</code> --- WSGI 工具和参考实现</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/urllib.html"><code>urllib</code> --- URL 处理模块</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/urllib.request.html"><code>urllib.request</code> --- 用于打开 URL 的可扩展库</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/urllib.request.html#module-urllib.response"><code>urllib.response</code> --- urllib 使用的 Response 类</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/urllib.parse.html"><code>urllib.parse</code> 用于解析 URL</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/urllib.error.html"><code>urllib.error</code> --- urllib.request 引发的异常类</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/urllib.robotparser.html"><code>urllib.robotparser</code> --- robots.txt 语法分析程序</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/http.html"><code>http</code> --- HTTP 模块</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/http.client.html"><code>http.client</code> --- HTTP 协议客户端</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/ftplib.html"><code>ftplib</code> --- FTP 协议客户端</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/poplib.html"><code>poplib</code> --- POP3 协议客户端</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/imaplib.html"><code>imaplib</code> --- IMAP4 协议客户端</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/smtplib.html"><code>smtplib</code> --- SMTP 协议客户端</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/uuid.html"><code>uuid</code> --- <strong>RFC 4122</strong> 定义的UUID对象</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/socketserver.html"><code>socketserver</code> --- 用于网络服务器的框架</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/http.server.html"><code>http.server</code> --- HTTP 服务器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/http.cookies.html"><code>http.cookies</code> --- HTTP状态管理</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/http.cookiejar.html"><code>http.cookiejar</code> —— HTTP 客户端的 Cookie 处理</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/xmlrpc.html"><code>xmlrpc</code> --- XMLRPC 服务端与客户端模块</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/xmlrpc.client.html"><code>xmlrpc.client</code> --- XML-RPC 客户端访问</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/xmlrpc.server.html"><code>xmlrpc.server</code> --- 基本 XML-RPC 服务器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/ipaddress.html"><code>ipaddress</code> --- IPv4/IPv6 操作库</a></li>
</ul>
</li>
<li>国际化
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/gettext.html"><code>gettext</code> --- 多语种国际化服务</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/locale.html"><code>locale</code> --- 国际化服务</a></li>
</ul>
</li>
<li>程序框架
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/turtle.html"><code>turtle</code> --- 海龟绘图</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/cmd.html"><code>cmd</code> --- 支持面向行的命令解释器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/shlex.html"><code>shlex</code> —— 简单的词法分析</a></li>
</ul>
</li>
<li>开发工具
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/typing.html"><code>typing</code> —— 类型注解支持</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/pydoc.html"><code>pydoc</code> --- 文档生成器和在线帮助系统</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/devmode.html">Python 开发模式</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/devmode.html#effects-of-the-python-development-mode">Python 开发模式的效果</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/devmode.html#resourcewarning-example">ResourceWarning 示例</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/devmode.html#bad-file-descriptor-error-example">文件描述符错误示例</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/doctest.html"><code>doctest</code> --- 测试交互性的Python示例</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/unittest.html"><code>unittest</code> --- 单元测试框架</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/unittest.mock.html"><code>unittest.mock</code> --- 模拟对象库</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/unittest.mock-examples.html"><code>unittest.mock</code> --- 上手指南</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/2to3.html">2to3 --- Automated Python 2 to 3 code translation</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/test.html"><code>test</code> --- Python 回归测试包</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/test.html#module-test.support"><code>test.support</code> --- 针对 Python 测试套件的工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/test.html#module-test.support.socket_helper"><code>test.support.socket_helper</code> --- 用于套接字测试的工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/test.html#module-test.support.script_helper"><code>test.support.script_helper</code> --- 用于 Python 执行测试工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/test.html#module-test.support.bytecode_helper"><code>test.support.bytecode_helper</code> --- 用于测试正确字节码生成的支持工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/test.html#module-test.support.threading_helper"><code>test.support.threading_helper</code> --- 用于线程测试的工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/test.html#module-test.support.os_helper"><code>test.support.os_helper</code> --- 用于操作系统测试的工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/test.html#module-test.support.import_helper"><code>test.support.import_helper</code> --- 用于导入测试的工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/test.html#module-test.support.warnings_helper"><code>test.support.warnings_helper</code> --- 用于警告测试的工具</a></li>
</ul>
</li>
<li>调试和分析
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/audit_events.html">审计事件表</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/bdb.html"><code>bdb</code> --- 调试器框架</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/faulthandler.html"><code>faulthandler</code> —— 转储 Python 的跟踪信息</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/pdb.html"><code>pdb</code> --- Python 的调试器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/profile.html">Python 性能分析器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/timeit.html"><code>timeit</code> --- 测量小代码片段的执行时间</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/trace.html"><code>trace</code> —— 跟踪 Python 语句的执行</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/tracemalloc.html"><code>tracemalloc</code> --- 跟踪内存分配</a></li>
</ul>
</li>
<li>软件打包和分发
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/distutils.html"><code>distutils</code> --- 构建和安装 Python 模块</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/ensurepip.html"><code>ensurepip</code> --- 引导 <code>pip</code> 安装器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/venv.html"><code>venv</code> --- 创建虚拟环境</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/zipapp.html"><code>zipapp</code> —— 管理可执行的 Python zip 打包文件</a></li>
</ul>
</li>
<li>Python运行时服务
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/sys.html"><code>sys</code> --- 系统相关的参数和函数</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/sysconfig.html"><code>sysconfig</code> —— 提供对 Python 配置信息的访问支持</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/builtins.html"><code>builtins</code> --- 内建对象</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/__main__.html"><code>__main__</code> --- 最高层级代码环境</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/warnings.html"><code>warnings</code> —— 警告信息的控制</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/dataclasses.html"><code>dataclasses</code> --- 数据类</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/contextlib.html"><code>contextlib</code> --- 为 <code>with</code>语句上下文提供的工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/abc.html"><code>abc</code> --- 抽象基类</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/atexit.html"><code>atexit</code> --- 退出处理器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/traceback.html"><code>traceback</code> —— 打印或读取堆栈的跟踪信息</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/__future__.html"><code>__future__</code> --- Future 语句定义</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/gc.html"><code>gc</code> --- 垃圾回收器接口</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/inspect.html"><code>inspect</code> --- 检查对象</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/site.html"><code>site</code> —— 指定域的配置钩子</a></li>
</ul>
</li>
<li>导入模块
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/zipimport.html"><code>zipimport</code> --- 从 Zip 存档中导入模块</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/pkgutil.html"><code>pkgutil</code> --- 包扩展工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/modulefinder.html"><code>modulefinder</code> --- 查找脚本使用的模块</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/runpy.html"><code>runpy</code> ——查找并执行 Python 模块</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/importlib.html"><code>importlib</code> --- <code>import</code> 的实现</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/importlib.metadata.html">使用 <code>importlib.metadata</code></a></li>
</ul>
</li>
<li>Python 语言服务
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/ast.html"><code>ast</code> --- 抽象语法树</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/symtable.html"><code>symtable</code> ——访问编译器的符号表</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/token.html"><code>token</code> --- 与Python解析树一起使用的常量</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/keyword.html"><code>keyword</code> --- 检验Python关键字</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/tokenize.html"><code>tokenize</code> --- 对 Python 代码使用的标记解析器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/tabnanny.html"><code>tabnanny</code> --- 模糊缩进检测</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/pyclbr.html"><code>pyclbr</code> --- Python 模块浏览器支持</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/py_compile.html"><code>py_compile</code> --- 编译 Python 源文件</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/compileall.html"><code>compileall</code> --- 字节编译 Python 库</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/dis.html"><code>dis</code> --- Python 字节码反汇编器</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/pickletools.html"><code>pickletools</code> --- pickle 开发者工具集</a></li>
</ul>
</li>
<li>Unix 专有服务
<ul>
<li><a href="https://docs.python.org/zh-cn/3/library/posix.html"><code>posix</code> --- 最常见的 POSIX 系统调用</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/pwd.html"><code>pwd</code> --- 用户密码数据库</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/grp.html"><code>grp</code> --- 组数据库</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/termios.html"><code>termios</code> --- POSIX 风格的 tty 控制</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/tty.html"><code>tty</code> --- 终端控制功能</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/pty.html"><code>pty</code> --- 伪终端工具</a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/fcntl.html"><code>fcntl</code> —— 系统调用 <code>fcntl</code> 和 <code>ioctl</code></a></li>
<li><a href="https://docs.python.org/zh-cn/3/library/resource.html"><code>resource</code> --- 资源使用信息</a></li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[企业级数据库设计十个原则]]></title>
        <id>https://iicey.github.io/qgQtsnnwr/</id>
        <link href="https://iicey.github.io/qgQtsnnwr/">
        </link>
        <updated>2022-09-15T17:55:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="3个基础原则4个扩展性原则3-个完备性原则">3个基础原则，4个扩展性原则，3 个完备性原则</h1>
<h1 id="3个基础原则">3个基础原则</h1>
<ul>
<li>
<p>结构清晰：表名、字段命名没有歧义，能一眼看懂</p>
</li>
<li>
<p>唯一职责：一表一用，领域定义清晰，不存储无关信息，相关数据在一张表中</p>
</li>
<li>
<p>主键原则：设计不带物理意义的主键；有唯一约束，确保幂等</p>
</li>
</ul>
<h1 id="4-个扩展性原则影响系统的性能和容量">4 个扩展性原则（影响系统的性能和容量）</h1>
<ul>
<li>
<p>长短分离：可以扩展，长文本独立存储；有合适的容量设计</p>
</li>
<li>
<p>冷热分离：当前数据与历史数据分离</p>
</li>
<li>
<p>索引完备：有合适索引方便查询</p>
</li>
<li>
<p>不使用关联查询：不使用一切的 SQL Join 操作，不做2 个表或者更多表的关联查询</p>
</li>
</ul>
<h1 id="3-个完备性原则">3 个完备性原则</h1>
<ul>
<li>
<p>完整性：保证数据的准确性和完整性，重要的内容都有记录</p>
</li>
<li>
<p>可追溯：可追溯创建时间，修改时间，可以逻辑删除</p>
</li>
<li>
<p>一致性原则：数据之间保持一致，尽可能避免同样的数据存储在不同表中</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于我]]></title>
        <id>https://iicey.github.io/fj-ICXXe1/</id>
        <link href="https://iicey.github.io/fj-ICXXe1/">
        </link>
        <updated>2022-09-15T06:20:17.000Z</updated>
        <content type="html"><![CDATA[<p>加微信私聊15517501823</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[IP代理服务器搭建(含拨号)]]></title>
        <id>https://iicey.github.io/oPQe6nMFv/</id>
        <link href="https://iicey.github.io/oPQe6nMFv/">
        </link>
        <updated>2022-09-15T03:02:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="squid-install">Squid Install</h1>
<h2 id="centos">Centos</h2>
<pre><code class="language-shell">#!/bin/bash
yum install openssl -y
yum install squid -y
systemctl stop firewalld.service #停止firewall
systemctl disable firewalld.service #禁止firewall开机启动
yum install httpd-tools -y
htpasswd  -cb /etc/squid/passwd  username password #用户名和密码
echo '
via off 
forwarded_for transparent
access_log /var/log/squid/access.log
cache_mem 64 MB
auth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd
acl auth_user proxy_auth REQUIRED
http_access allow auth_user
maximum_object_size 4 MB
cache_dir ufs /var/spool/squid 100 16 256
http_port 3389
http_access allow all
coredump_dir /var/spool/squid
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0%  0
refresh_pattern . 0 20% 4320
httpd_suppress_version_string on
via off
forwarded_for delete
'&gt; /etc/squid/squid.conf
systemctl stop   squid
squid -z 
sleep 5
systemctl start   squid
systemctl enable squid.service
</code></pre>
<h2 id="ubuntu">Ubuntu</h2>
<pre><code class="language-shell">#!/bin/bash
apt-get install openssl -y
apt-get install squid -y
systemctl stop firewalld.service #停止firewall
systemctl disable firewalld.service #禁止firewall开机启动
apt-get install apache2 -y
htpasswd  -cb /etc/squid/passwd  username password #用户名和密码
echo '
via off 
forwarded_for transparent
access_log /var/log/squid/access.log
cache_mem 64 MB
auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/passwd
acl auth_user proxy_auth REQUIRED
http_access allow auth_user
maximum_object_size 4 MB
cache_dir ufs /var/spool/squid 100 16 256
http_port 3389
http_access allow all
coredump_dir /var/spool/squid
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0%  0
refresh_pattern . 0 20% 4320
httpd_suppress_version_string on
via off
forwarded_for delete
'&gt; /etc/squid/squid.conf
systemctl stop   squid
squid -z 
sleep 5
systemctl start   squid
systemctl enable squid.service
</code></pre>
<h1 id="安装拨号服务">安装拨号服务</h1>
<pre><code>mkdir /opt/linux_ic
mkdir /media2
chmod +x /etc/rc.local
vi /etc/rc.local
yum -y install cpan
ln -s /usr/lib/libperl.so.5.10.1 /usr/lib/libperl.so
yum install kernel-devel xinetd gcc gcc-c perl-devel perl-ExtUtils-Embed
cpan PAR::Packer
pp
perl -v
cpan pp
perl -MCPAN -e shell
cpan pp
reboot
ifconfig
ipconfig
yum search ifconfig
ipconfig
yum install net-tools.x86_64
ifconfig
nmcli con
cpan pp
pp
init 0
ifconfig
vi /etc/sysconfig/network-scripts/ifcfg-eth0
cd /opt/
ll
vi /etc/ppp/chap-secrets
passwd
init 0
init 0
ifconfig
cat /etc/ppp/chap-secrets
cd /opt/
ll
vi /etc/rc.local
vi /etc/sysconfig/network-scripts/ifcfg-eth0
passwd
init 0
ping baidu.com
ifconfig
pppoe-setup
pppoe-start
ping baidu.com
</code></pre>
<h1 id="查看拨号账号密码">查看拨号账号&amp;密码</h1>
<pre><code>cat /etc/ppp/chap-secrets
# Secrets for authentication using CHAP
# client        server  secret                  IP addresses
&quot;pld19447385@163&quot;       *       &quot;19447385&quot;
&quot;057627764253&quot;  *       &quot;587976&quot;
&quot;056491398317&quot;  *       &quot;666888&quot;
</code></pre>
<h1 id="自动拨号">自动拨号</h1>
<pre><code class="language-shell">#!/bin/bash
pppoe-stop
sleep 5
pppoe-start
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[frp内网穿透(http服务转发)]]></title>
        <id>https://iicey.github.io/U9FcvUka3/</id>
        <link href="https://iicey.github.io/U9FcvUka3/">
        </link>
        <updated>2022-09-15T02:34:21.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://github.com/fatedier/frp/releases">下载地址</a>，<a href="https://gofrp.org/docs/">文档地址</a></p>
<h1 id="server配置">Server配置</h1>
<h3 id="frpsini配置">frps.ini配置</h3>
<pre><code class="language-shell">[common]
bind_port = 7000  # 服务端监听端口，默认7000
token = password  # 鉴权使用的 token 值，客户端需要设置一样的值才能鉴权通过
dashboard_port = 7500  # Web 界面，访问 http://服务器IP:7500
dashboard_user = username  # HTTP BasicAuth 用户名	
dashboard_pwd = password  # HTTP BasicAuth 密码
</code></pre>
<h3 id="启动命令">启动命令</h3>
<pre><code class="language-shell">nohup ./frps -c ./frps.ini &gt;frp.log 2&gt;&amp;1 &amp;
</code></pre>
<h1 id="client配置">Client配置</h1>
<h3 id="frpcini配置">frpc.ini配置</h3>
<pre><code>[common]
server_addr = xx.xx.xx.xx  # 连接服务端的地址
server_port = 7000  # 连接服务端的端口	
token = password  # 鉴权使用的 token 值，需要和服务端设置一样的值才能鉴权通过

[app_name]
type = tcp
local_ip = 127.0.0.1  # 连接服务端时所绑定的本地 IP
local_port = 8000  # 连接服务端时所绑定的本地端口
remote_port = 7531  # 服务的外部访问端口，将 local_port 映射到外网
</code></pre>
<h3 id="启动命令-2">启动命令</h3>
<pre><code class="language-shell">./frpc -c frpc.ini
</code></pre>
]]></content>
    </entry>
</feed>